By: Barath Raj Asokan</a></small></p>",
"<br>"
)),
menuItem("Country", tabName = "country", icon = icon("chart-bar")),
menuItem("Continent", tabName = "continent", icon = icon("globe-africa")),
menuItem("Statistics", tabName = "stats", icon = icon("calculator")),
menuItem("Maps", tabName = "map", icon = icon("globe")),
menuItem("Data", tabName = "table", icon = icon("chart-bar")),
menuItem("About", tabName = "about", icon = icon("cannabis"))
)
),
dashboardBody(
tags$style(type="text/css", "
/*    Move everything below the header */
.content-wrapper {
margin-top: 50px;
}
.content {
padding-top: 60px;
}
/*    Format the title/subtitle text */
.title-box {
position: absolute;
text-align: center;
top: 50%;
left: 50%;
transform:translate(-50%, -50%);
}
@media (max-width: 590px) {
.title-box {
position: absolute;
text-align: center;
top: 10%;
left: 10%;
transform:translate(-5%, -5%);
}
}
@media (max-width: 767px) {
.primary-title {
font-size: 1.1em;
}
.primary-subtitle {
font-size: 1em;
}
}
/*    Make the image taller */
.main-header .logo {
height: 125px;
}
/*    Override the default media-specific settings */
@media (max-width: 5000px) {
.main-header {
padding: 0 0;
position: relative;
}
.main-header .logo,
.main-header .navbar {
width: 100%;
float: none;
}
.main-header .navbar {
margin: 0;
}
.main-header .navbar-custom-menu {
float: right;
}
}
/*    Move the sidebar down */
.main-sidebar {
position: absolute;
}
.left-side, .main-sidebar {
padding-top: 175px;
}"
),
shinyDashboardThemes(
theme = "blue_gradient"
),
tabItems(
tabItem("country",
fluidRow(
infoBoxOutput("max_crop", width = 3),
infoBoxOutput("min_crop", width = 3)
),
fluidRow(
column( width = 2,
box(selectInput("countries",'Countries',
choices = unique(All_crops$entity)),
width = NULL
)
),
tabBox(
width = 10,
selected = "Histogram",
tabPanel("Histogram",plotOutput('histogram'),
sliderInput("date", "Dates",
min = min(All_crops$year),
max = max(All_crops$year),
value = 1961,
step = 1,
animate = animationOptions(interval = 1500, loop = TRUE))),
tabPanel("Yearly Trend",plotOutput('linegraph')),
tabPanel("Piechart",plotlyOutput('pie'))
),
),
),
tabItem("continent",
fluidRow(
infoBoxOutput("max_crop2", width = 3),
infoBoxOutput("min_crop2", width = 3)
),
fluidRow( box(selectInput("continent",'Continent',
choices = unique(Not_Nacontinents$Continent)),
width = 2),
tabBox(
width = 10,
selected = "Histogram",
tabPanel("Histogram",plotOutput('histogram2')),
tabPanel("Yearly Trend",plotOutput('linegraph3')),
tabPanel("Piechart",plotlyOutput('pie2'))
)
)
),
tabItem("stats",
fluidRow(
valueBoxOutput("Maximum", width = 2),
valueBoxOutput("Minimum", width = 2),
valueBoxOutput("Average", width = 2)
),
fluidRow(
box(selectInput("countries2",'Countries',
choices = unique(All_crops$entity),
selected = "Australia"),
width = 2),
box(selectInput("crops",'Crops',
choices = unique(Shinydata$Crops),
selected = "rice"),
width = 2)
),
fluidRow(
tabBox(
width = 12,
selected = "Histogram",
tabPanel("Histogram",plotOutput('histogram3')),
tabPanel("Boxplot",plotOutput('box'))
)
)
),
tabItem("map",
fluidRow( infoBoxOutput("max_country", width = 4),
),
fluidRow( box(title = 'Map Distribution', width = 12, leafletOutput('leafmap')),
),
fluidRow( box(selectInput("crops1",'Crops',
choices = names(world_spdf@data[-1]),
selected = "Rice"),
width = 2),
)
),
tabItem("table",
fluidRow(
box(selectInput("countries_t",'Countries',
choices = unique(All_crops$entity)),
width = 2
)
),
fluidRow(
box(dataTableOutput("DT",height = "500px"),width = 12)
)
),
tabItem("about",
h1("ABOUT", align = "center"),
h3("Subject: Dynamic representation of global annual crop production",
align= "center"),
br(),
p("I have created this dashboard where I
attempt to represent the data in a dynamic fashion by utilizing
R Shiny. Via this representation, the goal is to help users find
out important insights regarding production KPIs in agriculture
sector.",
style = "font-si24pt"),
p("With this in mind, I have broken down the representation into
four parts:"),
br(),
h4("Data representation at a Country and Continent Level:"),
p("I provide information at both country and continent level.
For each country/continent, user can see:"),
p("1. A histogram that dynamically shows the annual production of
each crop type."),
p("2. Yearly trend of production per crops"),
p("3. A pie chart that shows percentage of overall crop production
per crop type."),
p("This is in addition to providing quick glance of minimum/maximum
grown crops per country/continent."),
br(),
h4("Statistics:"),
p("At a granular level of each crop type per country, users can visually
observe statistical information in the matter of seconds:"),
p("1. Maximum, Minimum, and Average production."),
p("2. A yearly trend of production rate per crop."),
p("3. A boxplot that shows quartile distribution of production values
observed each year."),
br(),
h4("Maps:"),
p("A geographic representation of average production of each crop.
Thanks to this representation, Users can quickly distinguish regions
with higher production for a given crop."),
br(),
h4("Data:"),
p("The data I have used is published by The UN Food and Agricultural
Organization (FAO). This data is about  agricultural yields across crop
types and by country from 1960 to 2014. Data specific to each country can
be accessed from this tab. Please note that crop yields are measured at tonnes
produced per hectare per year.")
)
)
)
)
}
server = function(input,output,session){
crops <- reactive({input$crops1})
avg <- reactive({ Shinydata %>% filter(entity==input$countries2) %>%
filter(Crops==input$crops) %>%
select(Tonnes) %>% colMeans() })
output$histogram = renderPlot({
All_crops %>% gather(key = 'Crops',value = 'Tonnes',-entity,-year,-Continent,-Latitude,
-Longitude,-Latitude_country,-Longitude_country) %>%
filter(entity == input$countries) %>%
filter(year == input$date) %>%
filter(Tonnes > 0) %>%
ggplot(aes(x=Crops,y=Tonnes,fill=Crops,xlab = 'Crops', ylab = 'Tonnes per Hectar'))+
geom_col(width = 0.5) +
labs(title = "Total Crop Production Per Country",x="")+
theme(axis.text.x = element_blank(),
plot.title = element_text(face = 'bold',hjust = 0.5))+
theme_bw()
})
output$linegraph = renderPlot({
Shinydata %>%
filter(entity==input$countries) %>%
filter(Tonnes > 0) %>%
ggplot(aes(as.Date(year, format="%Y"), Tonnes, group = Crops))+
geom_line(aes(color = Crops),position = position_jitter(height = 0.01), alpha = 1.5)+
scale_y_log10()+
labs(x ="")+
theme_bw()+
scale_x_date(date_breaks = "2 year", date_labels = "%Y")
})
output$histogram2 = renderPlot({
All_crops %>% gather(key = 'Crops',value = 'Tonnes',-entity,-year,-Continent,-Latitude,
-Longitude,-Latitude_country,-Longitude_country) %>%
filter(Continent == input$continent) %>%
filter(Tonnes > 0) %>%
ggplot(aes(x=Crops,y=Tonnes,fill=Crops,xlab = 'Crops', ylab = 'Tonnes per Hectar'))+
geom_col(width = 0.5) +
labs(title = "Total Crop Production Per Continent",x="")+
theme(axis.text.x = element_blank(),
plot.title = element_text(face = 'bold',hjust = 0.5))+
theme_bw()
})
output$linegraph3 = renderPlot({
All_crops %>% gather(key = 'Crops',value = 'Tonnes',-entity,-year,-Continent,-Latitude,
-Longitude,-Latitude_country,-Longitude_country) %>%
filter(Continent == input$continent) %>%
filter(Tonnes > 0) %>%
select(year,Crops,Tonnes) %>%
group_by(year,Crops) %>%
summarize(Tonnes = sum(Tonnes)) %>%
ggplot(aes(as.Date(as.character(year),format = "%Y"), color = Crops, Tonnes))+
geom_line()+
scale_y_log10()+
labs(x ="")+
theme_bw()+
scale_x_date(date_breaks = "3 year", date_labels = "%Y")
})
output$histogram3 = renderPlot({
Shinydata %>% filter(entity==input$countries2) %>%
filter(Crops==input$crops) %>%
filter(Tonnes > 0) %>%
ggplot(aes(x=as.Date(year, format="%Y"),y=Tonnes, fill = Tonnes))+
geom_col()+
xlab("")+
scale_x_date(date_breaks = "3 year", date_labels = "%Y")+
scale_fill_gradient(low='yellow',high="red")+
geom_hline(aes(yintercept = round(avg(),2)), linetype = "dashed")+
geom_text(x=0, y=round(avg(),2) ,label = paste0("Average: ",round(avg(),2)),
vjust= -1, hjust=2)+
theme_bw()
})
output$Maximum = renderValueBox({
m <- Shinydata %>% filter(entity==input$countries2) %>%
filter(Crops==input$crops) %>%
filter(!is.na(Tonnes)) %>%
select(Tonnes) %>% max()
valueBox(
paste0(round(m,2)),"Maximum(Tonnes)",
color = "red",
icon = icon("sort-amount-up")
)
})
output$Minimum = renderValueBox({
n <- Shinydata %>% filter(entity==input$countries2) %>%
filter(Crops==input$crops) %>%
filter(!is.na(Tonnes)) %>%
select(Tonnes) %>% min()
valueBox(
paste0(round(n,2)),"Minimum(Tonnes)",
color = "yellow",
icon = icon("sort-amount-down")
)
})
output$Average = renderValueBox({
o <- Shinydata %>% filter(entity==input$countries2) %>%
filter(Crops==input$crops)  %>%
filter(!is.na(Tonnes)) %>%
select(Tonnes) %>% colMeans()
valueBox(
paste0(round(as.numeric(o),2)),"Average(Tonnes)",
color = "orange",
icon = icon("align-justify")
)
})
output$pie = renderPlotly({
label <-  pie_chart %>%
filter(entity == input$countries)
plot_ly(data = pie_chart, labels = unlist(label[,2]),
values = pie_chart$percent[pie_chart$entity==input$countries],
type = 'pie',
marker = list(
b = 40,
l = 60,
r = 10,
t = 25 ),
showlegend = TRUE,
sort = T)
})
output$pie2 = renderPlotly({
label <-  pie_continent %>%
filter(Continent == input$continent)
plot_ly(data = pie_continent, labels = unlist(label[,2]),
values = pie_continent$percent[pie_continent$Continent==input$continent],
type = 'pie',
marker = list(
b = 40,
l = 60,
r = 10,
t = 25 ),
showlegend = TRUE,
sort = T)
})
output$box = renderPlot({
qq <- Shinydata %>% filter(entity==input$countries2) %>%
filter(Crops==input$crops) %>%
filter(!is.na(Tonnes))
Shinydata %>% filter(entity==input$countries2) %>%
filter(Crops==input$crops) %>%
filter(!is.na(Tonnes)) %>%
ggplot(aes(x=Crops, y= Tonnes,fill = Crops))+
stat_boxplot(geom = "errorbar", width = 0.5)+
geom_boxplot(show.legend = F,outlier.colour = "red", outlier.shape = 1,
outlier.size = 2,
fill = "palegreen")+
scale_y_log10()+
geom_hline(aes(yintercept = as.numeric(quantile(qq$Tonnes)[2])), linetype = "dashed",color = "red")+
geom_text(aes(x=0, y= as.numeric(quantile(qq$Tonnes)[2]),
label = paste0("Q1: ",round(as.numeric(quantile(qq$Tonnes)[2]),2))),
vjust= -0.5, hjust=-1)+
geom_hline(aes(yintercept = as.numeric(quantile(qq$Tonnes)[4])), linetype = "dashed",color = "red")+
geom_text(aes(x=0, y= as.numeric(quantile(qq$Tonnes)[4]),
label = paste0("Q3: ",round(as.numeric(quantile(qq$Tonnes)[4]),2))),
vjust= -0.5, hjust=-1)+
theme_bw()
})
output$max_crop <- renderInfoBox({
max_crop <-  Shinydata %>%
filter(entity==input$countries) %>%
filter(Tonnes > 0) %>%
pivot_wider(names_from = "year", values_from = "Tonnes")
max_crop <- as.tibble(cbind(max_crop, total = rowSums(max_crop[,3:56])))
max_crop <- max_crop$Crops[which.max(max_crop$total)]
infoBox(
"Maximum Grown Crop", toupper(max_crop),
color = "purple",
fill = T,
icon = icon("sort-amount-up")
)
})
output$min_crop <- renderInfoBox({
min_crop <-  Shinydata %>%
filter(entity==input$countries) %>%
filter(Tonnes > 0) %>%
pivot_wider(names_from = "year", values_from = "Tonnes")
min_crop <- as.tibble(cbind(min_crop, total = rowSums(min_crop[,3:56])))
min_crop <- min_crop$Crops[which.min(min_crop$total)]
infoBox(
"Minimum Grown Crop", toupper(min_crop),
color = "red",
fill = T,
icon = icon("sort-amount-down")
)
})
output$max_crop2 <- renderInfoBox({
max_crop2 <- All_crops %>% gather(key = 'Crops',value = 'Tonnes',-entity,-year,-Continent,-Latitude,
-Longitude,-Latitude_country,-Longitude_country) %>%
filter(Continent == input$continent) %>%
filter(Tonnes > 0) %>%
select(year,Crops,Tonnes) %>%
group_by(Crops) %>%
summarize(Tonnes = sum(Tonnes))
max_crop2 <- max_crop2$Crops[which.max(max_crop2$Tonnes)]
infoBox(
"Maximum Grown Crop", toupper(max_crop2),
color = "purple",
fill = T,
icon = icon("sort-amount-up")
)
})
output$min_crop2 <- renderInfoBox({
min_crop2 <- All_crops %>% gather(key = 'Crops',value = 'Tonnes',-entity,-year,-Continent,-Latitude,
-Longitude,-Latitude_country,-Longitude_country) %>%
filter(Continent == input$continent) %>%
filter(Tonnes > 0) %>%
select(year,Crops,Tonnes) %>%
group_by(Crops) %>%
summarize(Tonnes = sum(Tonnes))
min_crop2 <- min_crop2$Crops[which.min(min_crop2$Tonnes)]
infoBox(
"Minimum Grown Crop", toupper(min_crop2),
color = "red",
fill = T,
icon = icon("sort-amount-down")
)
})
output$DT <- renderDataTable({
DT <- Shinydata %>%
filter(entity == input$countries_t) %>%
filter(Tonnes > 0) %>%
pivot_wider(names_from = "year", values_from = "Tonnes")
DT[is.na(DT)] <- 0
DT <- as.tibble(cbind(DT, total = rowSums(DT[,3:56])))
datatable(DT,rownames = F,fillContainer = T,caption = "TABLE DATA")
})
output$max_country <- renderInfoBox({
max_c <- world_spdf@data$COUNTRY[which.max(unlist(world_spdf@data[input$crops1]))]
infoBox(
"Country with Max Production", max_c,
color = "purple",
fill = T,
icon = icon("globe")
)
})
output$leafmap = renderLeaflet({
mypalette <- colorBin( palette="RdYlGn", domain=world_spdf@data$Rice,
na.color="transparent",bins = 10)
mytext <- paste(
"Country: ", world_spdf@data$COUNTRY,"<br/>",
"Production: ", world_spdf@data$Rice,
sep="") %>%
lapply(htmltools::HTML)
leaflet(world_spdf) %>%
addProviderTiles(providers$Esri.WorldTopoMap)  %>%
addPolygons(fillColor = ~mypalette(world_spdf@data$Rice),
stroke=FALSE,
fillOpacity = 0.5,
smoothFactor = 0.5,
color= "white",
label = mytext,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"
)) %>%
addLegend( pal=mypalette, values= ~world_spdf@data$Rice,
opacity=0.9, title = "Tonnes/Hectar", position = "bottomleft",
layerId = "colorLegend")
})
observe({
filtered <- world_spdf@data[input$crops1]
mypalette <- colorBin( palette="RdYlGn", domain=as.numeric(unlist(filtered)),
na.color="transparent",bins = 10)
mytext <- paste(
"Country: ", world_spdf@data$COUNTRY,"<br/>",
"Production: ", as.numeric(unlist(filtered)),
sep="") %>%
lapply(htmltools::HTML)
leafletProxy("leafmap", data= world_spdf) %>%
clearShapes() %>%
clearPopups() %>%
addProviderTiles(providers$Esri.WorldTopoMap)  %>%
addPolygons(fillColor = ~mypalette(as.numeric(unlist(filtered))),
stroke=FALSE,
fillOpacity = 0.5,
smoothFactor = 0.5,
color= "white",
label = mytext,
labelOptions = labelOptions(
style = list("font-weight" = "normal", padding = "3px 8px"),
textsize = "13px",
direction = "auto"
)) %>%
addLegend( pal=mypalette, values= ~as.numeric(unlist(filtered)),
opacity=0.9, title = "Tonnes/Hectar", position = "bottomleft",
layerId = "colorLegend")
})
observeEvent(
input$countries2,
{ updateSelectInput(session,"crops", "Crops",
choices = unique(temp$Crops[temp$entity==input$countries2]))},
ignoreInit = TRUE
)
}
runApp(getwd())
